plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.bmuschko.docker-spring-boot-application'  version '9.3.1'
}

group = 'org.skillMatch'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("org.json:json:20240303")
    implementation("io.jsonwebtoken:jjwt-api:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6") // Для поддержки JSON
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    compileOnly("org.springframework.boot:spring-boot-starter-actuator")
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

docker {
    String ServiceName= "SecurityService"
    String imageName = "security-service:latest"
    def ourContainerName = ServiceName+"-docker"
    int port = 8071
    String groupTasks='Docker'

    url = 'http://localhost:2375'

    task syncJar(type: Copy) {
        group = groupTasks
        dependsOn assemble
        from bootJar.archiveFile.get().asFile
        into "$buildDir/docker"
    }

    task createDockerFile(type: Dockerfile) {
        group = groupTasks
        from 'eclipse-temurin:22-jdk'
        copyFile bootJar.archiveFileName.get(), '/app/'+ServiceName+'.jar'
        workingDir "/app"
        exposePort port
        defaultCommand 'java','-jar',ServiceName+'.jar'
        instruction 'HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=5 CMD wget --no-verbose --tries=1 --spider http://localhost:'+port+'/actuator/health || exit 1'
    }

    task buildImage(type: DockerBuildImage) {
        group = groupTasks
        dependsOn createDockerFile, syncJar
        inputDir = createDockerFile.getDestDir()
        images = [imageName]
    }

    task stopContainer(type: DockerStopContainer) {
        group = groupTasks
        targetContainerId("$ourContainerName")
        onError { exception -> handleError(exception) }
    }

    task removeContainer(type: DockerRemoveContainer) {
        dependsOn stopContainer
        group = groupTasks
        targetContainerId("$ourContainerName")
        onError { exception -> handleError(exception) }
    }

    task createContainer(type: DockerCreateContainer) {
        group = groupTasks
        dependsOn buildImage, removeContainer
        targetImageId buildImage.getImageId()
        containerName = "$ourContainerName"
        hostConfig.portBindings = [port+':'+port]
        hostConfig.network = 'my-network'
    }

    task startContainer(type: DockerStartContainer) {
        group = groupTasks
        dependsOn createContainer
        targetContainerId("$ourContainerName")
    }

}
private void handleError(Throwable exc) {
    if (exc.message != null &&
            !exc.message.contains('NotModifiedException') &&
            !exc.message.contains('No such container')) {
    }
}
